version: '2.2'
services:

  web:
    image: aspendigital/octobercms
    ports:
      - 8080:80
    environment:
      - DB_TYPE=mysql
      - DB_HOST=mysql #DB_HOST should match the service name of the database container
      - DB_DATABASE=octobercms
      - DB_USERNAME=$MYSQL_USER
      - DB_PASSWORD=$MYSQL_PASSWORD  
      
  mysql:
    image: mysql:5.7
    volumes:
      - db_logs:/var/log/mysql
    command: mysqld --general-log=1 --general-log-file=/var/log/mysql/mysql.log
    ports:
      - 3306:3306
    environment:
      - MYSQL_ROOT_PASSWORD=$MYSQL_PASSWORD
      - MYSQL_DATABASE=octobercms
      
  mysqld-metrics-exporter:
    image: prom/mysqld-exporter
    ports:
      - 9104:9104
    environment:
      - DATA_SOURCE_NAME=$$MYSQL_USER:$MYSQL_PASSWORD@(mysql:3306)/
    depends_on:
      - mysql
      
  node_exporter:
    image: prom/node-exporter:latest
    container_name: db1_node_exporter
    ports:
      - "9100:9100"
#    command: --collectors.enabled=diskstats,filesystem,loadavg,meminfo,netdev,stat,time,uname
      
  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./prometheus/config/rules.yml:/etc/prometheus/rules.yml
      - ./prometheus/prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    ports:
      - 9090:9090
      
  alertmanager:
    image: prom/alertmanager
    ports:
      - 9093:9093
    volumes:
      - ./alertmanager/:/etc/alertmanager/
    command:
      - '--config.file=/etc/alertmanager/config.yml'
      - '--storage.path=/alertmanager'

  blackbox-exporter:
    image: prom/blackbox-exporter
    ports:
      - 9115:9115
    volumes:
      - ./blackbox-exporter/:/config/
    command:
      - '--config.file=/config/blackbox.yml'

  grafana:
    image: grafana/grafana
    depends_on:
      - prometheus
    ports:
      - 3000:3000
    volumes:
      - ./grafana/provisioning/:/etc/grafana/provisioning/
      - ./grafana/storage/:/var/lib/grafana
  
  elasticsearch:
    image: elastic/elasticsearch:$STACK_VERSION
    container_name: elasticsearch
    restart: always
    environment:
      xpack.security.enabled: false
      discovery.type: single-node
      ES_JAVA_OPTS: "-Xmx256m -Xms256m"
      ELASTIC_PASSWORD: $ELASTIC_PASSWORD
      path.data: /usr/share/elasticsearch/data
    ulimits: 
      memlock:
        soft: -1 
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    cap_add: 
      - IPC_LOCK
    volumes:
      - ./elasticsearch/elasticsearch-data-volume:/usr/share/elasticsearch/data
      - ./elasticsearch/elastic_config.yml:/usr/share/elasticsearch/config/elasticsearch.yml
    ports:
      - "9200:9200"
      - "9300:9300"

  logstash:
    container_name: logstash
    image: elastic/logstash:$STACK_VERSION
    restart: always
    ports:
     - "5000:5000"
     - "9600:9600"
    environment:
      SERVER_NAME: logstash
      ES_JAVA_OPTS: "-Xmx256m -Xms256m"
      ELASTICSEARCH_USERNAME: elastic
      ELASTICSEARCH_PASSWORD: $ELASTIC_PASSWORD
      XPACK_MONITORING_ENABLED: true
      PATH_CONFIG: /usr/share/logstash/confs
    depends_on:
      - elasticsearch
    volumes:
      - ./logstash/adapter_conf:/usr/share/logstash/confs
      - db_logs:/usr/share/logstash/input

  kibana:
    container_name: kibana
    image: elastic/kibana:$STACK_VERSION
    restart: always
    environment:
      SERVER_NAME: kibana
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
      ELASTICSEARCH_USERNAME: elastic
      ELASTICSEARCH_PASSWORD: $ELASTIC_PASSWORD
      ELASTICSEARCH_URL: http://elasticsearch:9200
      XPACK_SECURITY_ENABLED: false
      PATH_DATA: /usr/share/kibana/data
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    volumes:
      - ./kibana/data:/usr/share/kibana/data

  heartbeat:
    container_name: heartbeat
    hostname: heartbeat
    user: root #To read the docker socket
    image: elastic/heartbeat:$STACK_VERSION
    volumes:
      - ./heartbeat/heartbeat.yml:/usr/share/heartbeat/heartbeat.yml
    depends_on:
      elasticsearch: { condition: service_healthy }
    command: heartbeat -e -strict.perms=false

  metricbeat:
    container_name: metricbeat
    hostname: metricbeat
    user: root #To read the docker socket
    image: elastic/metricbeat:$STACK_VERSION
    volumes:
      - ./metricbeat/metricbeat.yml:/usr/share/metricbeat/metricbeat.yml
    command: metricbeat -e -strict.perms=false
    environment:
      - "MYSQL_USER=${MYSQL_USER}"
      - "MYSQL_PASSWORD=${MYSQL_PASSWORD}"

  filebeat:
    container_name: filebeat
    hostname: filebeat
    user: root #To read the docker socket
    image: elastic/filebeat:$STACK_VERSION
    volumes:
      #Mount the Filebeat configuration so users can make edits.
      - ./filebeat/filebeat.yml:/usr/share/filebeat/filebeat.yml
      #Mount the prospectors directory. Users can in turn add propspectors to this directory and they will be dynamically loaded.
      - ./filebeat/prospectors.d/:/usr/share/filebeat/prospectors.d/
      #Mount the nginx logs into the Filebeat container so we can access and index them using the Filebeat nginx module.
      - ./logs/nginx/:/var/log/nginx/
      #Mount the MySQL logs into the Filebeat container so we can access and and index them using the Filebeat MySQL module.
      - db_logs:/var/log/mysql/
    command: filebeat -e -strict.perms=false
    depends_on:
      elasticsearch: { condition: service_healthy }

volumes: 
  elasticsearch-data-volume:
    driver: local
  db_logs:
    driver: local